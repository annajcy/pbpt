# find and configure third-party libraries
if(PBPT_BUILD_TESTS)
  find_package(GTest CONFIG REQUIRED)
  message(STATUS "PBPT_BUILD_TESTS is ON; GoogleTest found. Use symbol gtest::gtest for linking.")
else()
  message(STATUS "PBPT_BUILD_TESTS is OFF; skipping GoogleTest setup. To enable tests, set PBPT_BUILD_TESTS to ON.")
endif()

find_package(VulkanLoader  CONFIG REQUIRED)
find_package(glfw3           CONFIG REQUIRED)
find_package(imgui          CONFIG REQUIRED)
find_package(assimp         CONFIG REQUIRED)
find_package(stb            CONFIG REQUIRED)
find_package(slang          CONFIG REQUIRED)

# build imgui with Vulkan and GLFW backends
add_library(imgui_vk STATIC)
set(_IMGUI_PKG_ROOT "")
if (DEFINED imgui_PACKAGE_FOLDER)
  # 单配置生成器（Ninja/Makefiles）
  set(_IMGUI_PKG_ROOT "${imgui_PACKAGE_FOLDER}")
else()
  # 多配置生成器（VS/Xcode）；用当前 CMAKE_BUILD_TYPE 选择
  if (CMAKE_BUILD_TYPE STREQUAL "Debug" AND DEFINED imgui_PACKAGE_FOLDER_DEBUG)
    set(_IMGUI_PKG_ROOT "${imgui_PACKAGE_FOLDER_DEBUG}")
  elseif (CMAKE_BUILD_TYPE STREQUAL "Release" AND DEFINED imgui_PACKAGE_FOLDER_RELEASE)
    set(_IMGUI_PKG_ROOT "${imgui_PACKAGE_FOLDER_RELEASE}")
  elseif (CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" AND DEFINED imgui_PACKAGE_FOLDER_RELWITHDEBINFO)
    set(_IMGUI_PKG_ROOT "${imgui_PACKAGE_FOLDER_RELWITHDEBINFO}")
  elseif (CMAKE_BUILD_TYPE STREQUAL "MinSizeRel" AND DEFINED imgui_PACKAGE_FOLDER_MINSIZEREL)
    set(_IMGUI_PKG_ROOT "${imgui_PACKAGE_FOLDER_MINSIZEREL}")
  endif()
endif()

if (_IMGUI_PKG_ROOT STREQUAL "")
  message(FATAL_ERROR "Cannot resolve ImGui package folder; ensure you're using Conan's CMakeDeps & toolchain and set CMAKE_BUILD_TYPE correctly.")
endif()

message(STATUS "ImGui package root : ${_IMGUI_PKG_ROOT}")

# 2) 头文件与后端源码目录
set(IMGUI_INC_DIR      "${_IMGUI_PKG_ROOT}/include")
set(IMGUI_BACKENDS_DIR "${_IMGUI_PKG_ROOT}/res/bindings")  

message(STATUS "ImGui include dir  : ${IMGUI_INC_DIR}")
message(STATUS "ImGui backends dir : ${IMGUI_BACKENDS_DIR}")

target_sources(imgui_vk PRIVATE
  "${IMGUI_BACKENDS_DIR}/imgui_impl_glfw.cpp"
  "${IMGUI_BACKENDS_DIR}/imgui_impl_vulkan.cpp"
)

target_include_directories(imgui_vk PUBLIC
  "${IMGUI_INC_DIR}"
  "${IMGUI_BACKENDS_DIR}"
)

target_link_libraries(imgui_vk PUBLIC
  imgui::imgui
  glfw
  Vulkan::Loader
)

# build stb implementation
set(STB_GENERATED_DIR "${CMAKE_BINARY_DIR}/generated")
set(STB_IMPLEMENTATION_FILE "${STB_GENERATED_DIR}/stb.cpp")
file(MAKE_DIRECTORY ${STB_GENERATED_DIR})
set(STB_IMPLEMENTATION_CONTENT
"// Auto-generated STB implementation file
// This file is automatically generated by CMake

#define STB_IMAGE_IMPLEMENTATION
#include \"stb_image.h\"

#define STB_IMAGE_WRITE_IMPLEMENTATION
#include \"stb_image_write.h\"

#define STB_TRUETYPE_IMPLEMENTATION
#include \"stb_truetype.h\"
")
file(WRITE "${STB_IMPLEMENTATION_FILE}" "${STB_IMPLEMENTATION_CONTENT}")
message(STATUS "STB implementation file generated at: ${STB_IMPLEMENTATION_FILE}")

add_library(stb_impl STATIC "${STB_IMPLEMENTATION_FILE}")
target_link_libraries(stb_impl PUBLIC stb::stb)
