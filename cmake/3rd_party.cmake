# --- 测试框架 (只有在需要时才获取) ---
if(PBPT_BUILD_TESTS)
  FetchContent_Declare(
    googletest
    GIT_REPOSITORY https://github.com/google/googletest.git
    GIT_TAG        v1.14.0
  )
  # 使用普通 set，而非 CACHE，确保每次配置时都能应用这些设置
  set(gtest_build_samples OFF)
  set(gtest_build_tests OFF)
  FetchContent_MakeAvailable(googletest)
else()
  message(STATUS "PBPT_BUILD_TESTS is OFF")
endif()

# GLAD (OpenGL loader)
FetchContent_Declare(
    glad
    GIT_REPOSITORY https://github.com/Dav1dde/glad.git
    GIT_TAG v0.1.36
)
set(GLAD_PROFILE "core" CACHE STRING "OpenGL profile")
set(GLAD_API "gl=4.1" CACHE STRING "API type/version pairs")
set(GLAD_GENERATOR "c" CACHE STRING "Language to generate the binding for")
FetchContent_MakeAvailable(glad)
message(STATUS "GLAD configured for OpenGL 4.1 core profile")

# --------------------------------------------------------------------
# 下载并解压 Slang SDK 
# --------------------------------------------------------------------
set(SLANG_VERSION "2025.10.4")
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  set(SLANG_DIR_NAME "slang-${SLANG_VERSION}-linux-x86_64")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  if(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "arm64|aarch64")
    set(SLANG_DIR_NAME "slang-${SLANG_VERSION}-macos-aarch64")
  else()
    set(SLANG_DIR_NAME "slang-${SLANG_VERSION}-macos-x86_64")
  endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(SLANG_DIR_NAME "slang-${SLANG_VERSION}-windows-x86_64")
else()
  message(FATAL_ERROR "Unsupported platform for automatic Slang SDK download: ${CMAKE_SYSTEM_NAME}")
endif()
set(SLANG_DOWNLOAD_URL "https://github.com/shader-slang/slang/releases/download/v${SLANG_VERSION}/${SLANG_DIR_NAME}.zip")
FetchContent_Declare(slang_dep URL ${SLANG_DOWNLOAD_URL})
FetchContent_MakeAvailable(slang_dep)
FetchContent_GetProperties(slang_dep)
if(NOT slang_dep_SOURCE_DIR)
    message(FATAL_ERROR "Could not get source directory for slang dependency after population.")
endif()
find_package(slang ${SLANG_VERSION} REQUIRED PATHS "${slang_dep_SOURCE_DIR}" NO_DEFAULT_PATH)
if(slang_FOUND)
  message(STATUS "Successfully found Slang ${SLANG_VERSION} via FetchContent_MakeAvailable.")
endif()

# --- GLFW ---
FetchContent_Declare(glfw GIT_REPOSITORY https://github.com/glfw/glfw.git GIT_TAG 3.4)
set(GLFW_BUILD_EXAMPLES OFF)
set(GLFW_BUILD_TESTS    OFF)
set(GLFW_BUILD_DOCS     OFF)
FetchContent_MakeAvailable(glfw)

# --- Assimp ---
FetchContent_Declare(assimp GIT_REPOSITORY https://github.com/assimp/assimp.git GIT_TAG v5.4.1)
set(ASSIMP_BUILD_TESTS OFF)
set(ASSIMP_BUILD_ASSIMP_TOOLS OFF)
set(ASSIMP_INSTALL OFF)
# 禁用 Assimp 的严格警告检查，避免编译错误
set(ASSIMP_WARNINGS_AS_ERRORS OFF)
# 禁用一些导致编译失败的构建选项
set(ASSIMP_BUILD_ASSIMP_VIEW OFF)
set(ASSIMP_BUILD_SAMPLES OFF)
set(ASSIMP_BUILD_ALL_EXPORTERS_BY_DEFAULT OFF)
set(ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT OFF)
# 只启用常用的导入格式
set(ASSIMP_BUILD_OBJ_IMPORTER ON)
set(ASSIMP_BUILD_FBX_IMPORTER ON)
set(ASSIMP_BUILD_GLTF_IMPORTER ON)
FetchContent_MakeAvailable(assimp)

# --- ImGui ---
FetchContent_Declare(imgui GIT_REPOSITORY https://github.com/ocornut/imgui.git GIT_TAG v1.91.9b)
# IMGUI_BUILD_EXAMPLES 是 imgui 内部的选项，无需设置，FetchContent_MakeAvailable 会处理
FetchContent_MakeAvailable(imgui)
# 创建一个统一的、包含所有后端的 ImGui 静态库
add_library(imgui_multibackend STATIC)

# 添加所有需要编译的源文件：核心 + 所有后端
target_sources(imgui_multibackend PRIVATE
  # ImGui 核心文件
  ${imgui_SOURCE_DIR}/imgui.cpp
  ${imgui_SOURCE_DIR}/imgui_draw.cpp
  ${imgui_SOURCE_DIR}/imgui_tables.cpp
  ${imgui_SOURCE_DIR}/imgui_widgets.cpp
  
  # GLFW 窗口后端
  ${imgui_SOURCE_DIR}/backends/imgui_impl_glfw.cpp
  
  # OpenGL 渲染后端
  ${imgui_SOURCE_DIR}/backends/imgui_impl_opengl3.cpp
  
  # Vulkan 渲染后端
  ${imgui_SOURCE_DIR}/backends/imgui_impl_vulkan.cpp
)

# 添加 ImGui 的头文件目录
target_include_directories(imgui_multibackend PUBLIC
  ${imgui_SOURCE_DIR}
  ${imgui_SOURCE_DIR}/backends
)

# 将所有依赖项公开链接到这个库。
# 使用 PUBLIC，这样链接到 imgui_multibackend 的任何目标都能自动获得这些依赖。
target_link_libraries(imgui_multibackend PUBLIC
  glfw
  Vulkan::Vulkan
  OpenGL::GL
)
message(STATUS "Configuring ImGui with BOTH Vulkan and OpenGL backends.")

# --- STB ---
FetchContent_Declare(stb GIT_REPOSITORY https://github.com/nothings/stb.git GIT_TAG master)
FetchContent_MakeAvailable(stb)

# 自动生成 stb.cpp 文件
set(STB_GENERATED_DIR "${CMAKE_BINARY_DIR}/generated")
set(STB_IMPLEMENTATION_FILE "${STB_GENERATED_DIR}/stb.cpp")

# 确保生成目录存在
file(MAKE_DIRECTORY ${STB_GENERATED_DIR})

# 生成 stb.cpp 文件内容
set(STB_IMPLEMENTATION_CONTENT
"// Auto-generated STB implementation file
// This file is automatically generated by CMake

#define STB_IMAGE_IMPLEMENTATION
#include \"stb_image.h\"

#define STB_IMAGE_WRITE_IMPLEMENTATION
#include \"stb_image_write.h\"

#define STB_IMAGE_RESIZE2_IMPLEMENTATION
#include \"stb_image_resize2.h\"

#define STB_TRUETYPE_IMPLEMENTATION
#include \"stb_truetype.h\"

")

# 写入文件
file(WRITE ${STB_IMPLEMENTATION_FILE} ${STB_IMPLEMENTATION_CONTENT})

# 创建 STB 静态库
add_library(stb STATIC ${STB_IMPLEMENTATION_FILE})
target_include_directories(stb PUBLIC ${stb_SOURCE_DIR})

message(STATUS "STB implementation file generated at: ${STB_IMPLEMENTATION_FILE}")

# ====================================================================
#  将所有依赖项聚合到列表中，供主目标使用
# ====================================================================
# 通用第三方库
list(APPEND ext_lib
  glad
  imgui_multibackend
  stb
  assimp::assimp # 使用由 FetchContent 创建的带命名空间的目标名
  slang::slang
)

list(APPEND render_backend
  Vulkan::Vulkan
  OpenGL::GL
)

# 测试专用库
if (PBPT_BUILD_TESTS) 
  list(APPEND ext_lib
    GTest::gtest_main # 使用由 FetchContent 创建的带命名空间的目标名
  )
endif()

list(APPEND ext_move_lib slang::slang)  # 临时注释掉