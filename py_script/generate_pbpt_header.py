"""
Generate header files for each directory and a main pbpt.h file.
Each subdirectory gets its own .h file that includes all headers in that directory.
The main pbpt.h includes all subdirectory header files.
"""

import os
from pathlib import Path
from typing import Dict, List

def find_headers_by_directory(src_dir: Path) -> Dict[Path, List[Path]]:
    """
    Find all .hpp files organized by directory.
    
    Returns:
        Dictionary mapping directory paths to lists of header files in that directory
    """
    headers_by_dir = {}
    
    for root, dirs, files in os.walk(src_dir):
        root_path = Path(root)
        header_files = [f for f in files if f.endswith('.hpp')]
        
        if header_files:
            headers_by_dir[root_path] = sorted([root_path / f for f in header_files])
    
    return headers_by_dir


def generate_directory_header(dir_path: Path, headers: List[Path], src_dir: Path):
    """
    Generate a header file for a specific directory that includes all headers in that directory.
    
    Args:
        dir_path: The directory path
        headers: List of header files in this directory
        src_dir: The src root directory
    """
    # Get directory name for the output file
    dir_name = dir_path.name
    output_file = dir_path / f"{dir_name}.h"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Write header guard
        f.write("#pragma once\n\n")
        
        # Write comment
        rel_dir = dir_path.relative_to(src_dir)
        f.write(f"// Auto-generated file - includes all headers in {rel_dir}\n")
        f.write("// Generated by generate_pbpt_header.py\n\n")
        
        # Write includes for each header in this directory
        for header in headers:
            # Skip if this is the generated header file itself
            if header == output_file:
                continue
                
            # Use relative path from the directory
            rel_path = header.relative_to(dir_path)
            include_path = str(rel_path).replace('\\', '/')
            f.write(f'#include "{include_path}"\n')
    
    return output_file


def generate_main_pbpt_hpp(src_dir: Path, directory_headers: List[Path]):
    """
    Generate the main pbpt.h file that includes all directory header files.
    
    Args:
        src_dir: The src root directory
        directory_headers: List of generated directory header files
    """
    output_file = src_dir / "pbpt.h"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Write header guard
        f.write("#pragma once\n\n")
        
        # Write comment
        f.write("// Auto-generated file - includes all PBPT module headers\n")
        f.write("// Generated by generate_pbpt_header.py\n\n")
        
        # Sort directory headers for consistent output
        sorted_headers = sorted(directory_headers, key=lambda p: str(p.relative_to(src_dir)))
        
        # Write includes for each directory header
        for dir_header in sorted_headers:
            rel_path = dir_header.relative_to(src_dir)
            include_path = str(rel_path).replace('\\', '/')
            f.write(f'#include "{include_path}"\n')
    
    return output_file


def main():
    """Main function to generate all header files."""
    # Get the script directory
    script_dir = Path(__file__).parent.parent.absolute()
    
    # Define paths
    src_dir = script_dir / "src"
    
    # Check if src directory exists
    if not src_dir.exists():
        print(f"Error: src directory not found at {src_dir}")
        return 1
    
    # Find all headers organized by directory
    headers_by_dir = find_headers_by_directory(src_dir)
    
    if not headers_by_dir:
        print(f"Warning: No header files found in {src_dir}")
        return 1
    
    print(f"Found headers in {len(headers_by_dir)} directories")
    
    # Generate header file for each directory
    directory_headers = []
    for dir_path, headers in headers_by_dir.items():
        # Skip the src root directory itself
        if dir_path == src_dir:
            continue
            
        generated_file = generate_directory_header(dir_path, headers, src_dir)
        directory_headers.append(generated_file)
        
        rel_dir = dir_path.relative_to(src_dir)
        print(f"  Generated {rel_dir}/{dir_path.name}.hpp with {len(headers)} headers")
    
    # Generate main pbpt.hpp
    main_header = generate_main_pbpt_hpp(src_dir, directory_headers)
    print(f"\nGenerated main header: {main_header.relative_to(script_dir)}")
    print(f"Total: {len(directory_headers)} directory headers included")
    
    return 0


if __name__ == "__main__":
    exit(main())
