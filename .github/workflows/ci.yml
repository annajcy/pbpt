# .github/workflows/ci.yml
name: PBPT CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Python + Conan（跨平台）
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install "conan>=2.5"

      # Conan 缓存
      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: |
            ~/.conan2
          key: conan2-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('**/conanfile.py', '**/conanfile.txt') }}
          restore-keys: |
            conan2-${{ runner.os }}-${{ matrix.build_type }}-
            conan2-${{ runner.os }}-

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: 1.4.304.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      # 系统依赖（主要给 Linux 的 GLFW/X11/Wayland；命中二进制包也更稳）
      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config \
            libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev \
            libxi-dev libgl1-mesa-dev libwayland-dev libxkbcommon-dev \
            libglvnd-dev

      - name: Install system deps (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Using Xcode toolchain on macOS."

      - name: Install system deps (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Using MSVC toolchain on Windows."

      # 生成/刷新 Conan Profile
      - name: Conan profile detect
        run: conan profile detect --force

      - name: Conan install (${{ matrix.build_type }})
        run: |
          conan install . \
            -s build_type=${{ matrix.build_type }} \
            --build=missing \

      # CMake 配置：使用 Conan 生成的 toolchain
      - name: Configure CMake (${{ matrix.build_type }})
        run: |
          cmake -S . -B build/${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=build/${{ matrix.build_type }}/conan_toolchain.cmake \
            -DPBPT_BUILD_TESTS=ON \
            -DPBPT_BUILD_EXAMPLES=OFF \
            -DPBPT_BUILD_DOCUMENTATION=OFF

      # 构建
      - name: Build (${{ matrix.build_type }})
        run: |
          cmake --build build/${{ matrix.build_type }} --config ${{ matrix.build_type }} -- -v

      # 运行测试：先激活 Conan 运行环境（确保找到 Vulkan/Assimp 等共享库）
      - name: Test (${{ matrix.build_type }}) on Linux/macOS
        if: runner.os != 'Windows'
        run: |
          set -e
          source build/${{ matrix.build_type }}/conanrun.sh
          ctest --test-dir build/${{ matrix.build_type }} ${{ matrix.build_type == 'Debug' && '' || '' }} --output-on-failure
        shell: bash

      - name: Test (${{ matrix.build_type }}) on Windows
        if: runner.os == 'Windows'
        run: |
          call build\\${{ matrix.build_type }}\\conanrun.bat
          ctest --test-dir build\\${{ matrix.build_type }} -C ${{ matrix.build_type }} --output-on-failure
        shell: cmd
