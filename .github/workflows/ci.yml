# .github/workflows/ci.yml
name: PBPT CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # uv 缓存
      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.build_type }}-
            uv-${{ runner.os }}-

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install conan
          python -m pip install uv
          uv sync --python 3.11 --dev

      # Conan 缓存
      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: |
            ~/.conan2
          key: conan2-${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('**/conanfile.py', '**/conanfile.txt') }}
          restore-keys: |
            conan2-${{ runner.os }}-${{ matrix.build_type }}-
            conan2-${{ runner.os }}-

      # 可选：Vulkan SDK
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: 1.4.304.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Install system deps
        shell: bash
        run: |
          set -euo pipefail
          echo "Runner OS = $RUNNER_OS"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            pkgs=(
              build-essential pkg-config
              libx11-dev libx11-xcb-dev libxau-dev libxdmcp-dev
              libfontenc-dev libice-dev libsm-dev libxaw7-dev libxcomposite-dev
              libxdamage-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev
              libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxxf86vm-dev
              libxcb1-dev libxcb-glx0-dev libxcb-render0-dev libxcb-render-util0-dev
              libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev
              libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev
              libxcb-xinerama0-dev libxcb-dri3-dev libxcb-dri2-0-dev libxcb-present-dev
              libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev
              uuid-dev libgl1-mesa-dev libglvnd-dev libwayland-dev libxkbcommon-dev
              libxcursor-dev libxinerama-dev libxcb-cursor-dev
            )
            sudo apt-get install -y --no-install-recommends "${pkgs[@]}"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Using Xcode toolchain on macOS."
          else
            echo "Using MSVC toolchain on Windows."
          fi

      # 生成/刷新 Conan Profile
      - name: Conan profile detect
        run: |
          conan profile detect --force

      # === 统一的自定义 recipes 构建（bash，三平台共用，只按 matrix.build_type）===
      - name: Conan build custom recipes (${{ matrix.build_type }})
        shell: bash
        run: |
          set -euo pipefail
          if [[ -d "conan_recipe" ]]; then
            cd conan_recipe
            for d in */ ; do
              [[ -d "$d" ]] || continue
              [[ -f "${d}/conanfile.py" ]] || continue
              echo "::group::Conan create ${d} (${{ matrix.build_type }})"
              conan create "${d}" -s build_type=${{ matrix.build_type }} --build=missing -s compiler.cppstd=17
              echo "::endgroup::"
            done
          else
            echo "No conan_recipe directory; skipping custom recipes."
          fi

      # Conan 安装依赖（指定 bash，避免 Windows 下续行问题）
      - name: Conan install (${{ matrix.build_type }})
        shell: bash
        run: |
          conan install . \
            -s build_type=${{ matrix.build_type }} \
            --build=missing \
            -s compiler.cppstd=17

      # 构建
      - name: Conan Build (${{ matrix.build_type }})
        run: |
          conan build . -s build_type=${{ matrix.build_type }}

      # 运行测试：Linux/macOS 用 .sh；Windows 仍需 .bat（这两步保留分开更稳）
      - name: Test (${{ matrix.build_type }}) on Linux/macOS
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          source build/${{ matrix.build_type }}/conanrun.sh
          ctest --test-dir build/${{ matrix.build_type }} -C ${{ matrix.build_type }} --output-on-failure

      - name: Test (${{ matrix.build_type }}) on Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call build\${{ matrix.build_type }}\conanrun.bat
          ctest --test-dir build\${{ matrix.build_type }} -C ${{ matrix.build_type }} --output-on-failure
