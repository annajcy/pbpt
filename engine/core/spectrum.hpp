#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <iostream>
#include <type_traits>

#include "math/function.hpp"
#include "math/polynomial.hpp"
#include "math/vector.hpp"

namespace pbpt::core {

template <typename T, int N>
class SampledSpectrum : public math::Vector<T, N> {
public:
    SampledSpectrum() : math::Vector<T, N>() {}
    SampledSpectrum(const math::Vector<T, N>& vec) : math::Vector<T, N>(vec) {}
};

template<typename T, int N> 
class SampledWavelength : public math::Vector<T, N> {
public:
    SampledWavelength() : math::Vector<T, N>() {}
    SampledWavelength(const math::Vector<T, N>& vec) : math::Vector<T, N>(vec) {}
};

template<typename T, int N>
class SampledPdf : public math::Vector<T, N> {
public:
    SampledPdf() : math::Vector<T, N>() {}
    SampledPdf(const math::Vector<T, N>& vec) : math::Vector<T, N>(vec) {}
};

template<typename T>
constexpr inline T black_body(T t_K, T lambda_nm) {
    // Planck's law formula for black body radiation
    const double h = 6.62607015e-34;  // Planck's constant
    const double c = 299792458;       // Speed of light
    const double k = 1.380649e-23;    // Boltzmann's constant

    double l = lambda_nm * 1e-9; // Convert nm to m

    double L = (2 * h * c * c) / math::pow(l, 5) *
                      (1 / (math::fast_exp(h * c / (l * k * t_K)) - 1));

    return L;
}

template<typename T>
constexpr inline T black_body_M(T t_K) {
    // Stefan-Boltzmann law
    const double sigma = 5.670374419e-8;  // Stefan-Boltzmann constant
    double E = sigma * std::pow(t_K, 4);
    return E;
}

template<typename T>
constexpr inline T non_black_body(T t_K, T lambda_nm, T p_hd) {
    // Kirchhoff's law of thermal radiation
    return black_body(t_K, lambda_nm) * (1 - p_hd);
}

// max wavelength
template<typename T>
inline T black_body_max_wavelength(T t_K) {
    // Wien's displacement law
    const double b = 2.897771955e-3;  // Wien's displacement constant
    return b / t_K * 1e9;  // Convert from m to nm
}

template<typename T>
constexpr T lambda_min = 360;

template<typename T>
constexpr T lambda_max = 830;

template<typename Derived, typename T>
class SpectrumDistribution {
public:
    constexpr SpectrumDistribution() = default;

    constexpr T at(T lambda) const {
        return as_derived().at_impl(lambda);
    }

    template<int N>
    constexpr SampledSpectrum<T, N> sample(const SampledWavelength<T, N>& wavelengths) const {
        SampledSpectrum<T, N> result;
        for (int i = 0; i < N; ++i) {
            result[i] = at(wavelengths[i]);
        }
        return result;
    }

    const Derived& as_derived() const {
        return static_cast<const Derived&>(*this);
    }

    Derived& as_derived() {
        return static_cast<Derived&>(*this);
    }
};

template<typename D1, typename T1, typename D2, typename T2>
inline auto inner_product(const SpectrumDistribution<D1, T1>& d1, const SpectrumDistribution<D2, T2>& d2) {
    using R = std::common_type_t<T1, T2>;
    R result{};
    for (int i = lambda_min<int>; i <= lambda_max<int>; ++i) {
        result += d1.at(i) * d2.at(i);
    }
    return result;
}

template<class S>
struct Hold {
    std::shared_ptr<S> owned;        // 如果是右值，就放到这里
    const S* ref = nullptr;          // 如果是左值，就指向它
    Hold(const S& s): ref(&s) {}
    Hold(S&& s): owned(std::make_shared<S>(std::move(s))), ref(owned.get()) {}
    const S& get() const { return *ref; }
};

template<typename T, class D1, class D2>
class MultipliedSpectrumDistribution : public SpectrumDistribution<MultipliedSpectrumDistribution<T, D1, D2>, T> {
public:
    Hold<D1> s1; Hold<D2> s2;

    using base = SpectrumDistribution<MultipliedSpectrumDistribution<T, D1, D2>, T>;
    using base::base;
public:

    MultipliedSpectrumDistribution(const D1& a, const D2& b): s1(a), s2(b) {}
    MultipliedSpectrumDistribution(D1&& a, const D2& b): s1(std::move(a)), s2(b) {}
    MultipliedSpectrumDistribution(const D1& a, D2&& b): s1(a), s2(std::move(b)) {}
    MultipliedSpectrumDistribution(D1&& a, D2&& b): s1(std::move(a)), s2(std::move(b)) {}
    
    constexpr T at_impl(T λ) const { return s1.get().at(λ) * s2.get().at(λ); }
};

template<class D1, class T1, class D2, class T2>
auto operator*(D1&& a, D2&& b) {
  using R = std::common_type_t<T1,T2>;
  using A = std::decay_t<D1>; using B = std::decay_t<D2>;
  return MultipliedSpectrumDistribution<R, A, B>(std::forward<D1>(a), std::forward<D2>(b));
}

template<typename D1, typename T1, typename D2, typename T2>
inline auto operator*(const SpectrumDistribution<D1, T1>& s1, const SpectrumDistribution<D2, T2>& s2) {
    using R = std::common_type_t<T1, T2>;
    return MultipliedSpectrumDistribution<R, D1, D2>(static_cast<const D1&>(s1), static_cast<const D2&>(s2));
}

template<typename T>
class ConstantSpectrumDistribution : public SpectrumDistribution<ConstantSpectrumDistribution<T>, T> {
private:
    T m_value;

public:
    using base = SpectrumDistribution<ConstantSpectrumDistribution<T>, T>;
    using base::base;

    ConstantSpectrumDistribution(T value) : m_value(value) {}

    constexpr T at_impl(T lambda) const { return m_value; }
    constexpr T max_value() const { return m_value; }
};

template<typename T>
class BlackBodySpectrumDistribution : public SpectrumDistribution<BlackBodySpectrumDistribution<T>, T> {
private:
    T m_temperature;

public:
    using base = SpectrumDistribution<BlackBodySpectrumDistribution<T>, T>;
    using base::base;

    constexpr BlackBodySpectrumDistribution(T temperature) : m_temperature(temperature) {}

    constexpr T at_impl(T lambda) const {
        return black_body(m_temperature, lambda);
    }

    constexpr T max_wavelength() const {
        return black_body_max_wavelength(m_temperature);
    }

    constexpr T max_value() const {
        return black_body(m_temperature, max_wavelength());
    }
};

template<typename T>
class FunctionalSpectrumDistribution : public SpectrumDistribution<FunctionalSpectrumDistribution<T>, T> {
private:
    std::function<T(T)> m_f;

public:
    using base = SpectrumDistribution<FunctionalSpectrumDistribution<T>, T>;
    using base::base;

    constexpr FunctionalSpectrumDistribution(const std::function<T(T)>& f) : m_f(f) {}

    constexpr T at_impl(T lambda) const {
        return m_f(lambda);
    }
};

template<typename T, int LambdaMin = lambda_min<T>, int LambdaMax = lambda_max<T>>
class TabularSpectrumDistribution : public SpectrumDistribution<TabularSpectrumDistribution<T, LambdaMin, LambdaMax>, T> {
private:
    std::array<T, LambdaMax - LambdaMin + 1> m_samples;

public:
    using base = SpectrumDistribution<TabularSpectrumDistribution<T, LambdaMin, LambdaMax>, T>;
    using base::base;

    constexpr TabularSpectrumDistribution(const std::array<T, LambdaMax - LambdaMin + 1>& samples)
        : m_samples(samples) {}

    constexpr int sample_count() const {
        return LambdaMax - LambdaMin + 1;
    }

    constexpr int lambda_min() const {
        return LambdaMin;
    }

    constexpr int lambda_max() const {
        return LambdaMax;
    }

    template<typename U>
    constexpr T at_impl(U lambda) const {
        if(lambda < lambda_min() || lambda > lambda_max()){
            std::cout << "Warning: Wavelength " << lambda << " out of range [" << lambda_min() << ", " << lambda_max() << "]\n";
            return T(0);
        }

        return m_samples[(static_cast<int>(lambda) - LambdaMin)];
    }
};

template<typename T>
class RGBSigmoidPolynomial {
public:
    T c0, c1, c2;

public:
    RGBSigmoidPolynomial(T c0, T c1, T c2) : c0(c0), c1(c1), c2(c2) {}

    constexpr T at(T lambda) const {
        return math::sigmoid(math::Polynomial<T>::evaluate(lambda, c0, c1, c2));
    }
};

template<typename T>
class RGBSigmoidPolynomialNormalized {
public:
    T c0, c1, c2;

public:
    RGBSigmoidPolynomialNormalized(T c0, T c1, T c2) : c0(c0), c1(c1), c2(c2) {}

    constexpr T at(T lambda) const {
        const T t = (lambda - T(360)) / T(830 - 360);   // 归一化
        return math::sigmoid(math::Polynomial<T>::evaluate(t, c0, c1, c2));
    }

    RGBSigmoidPolynomial<T> to_unnormalized() const {
        double a = 360.0, b = 1.0 / (830.0 - 360.0);
        double A = c0, B =c1, C = c2;
        return RGBSigmoidPolynomial<T>{
            A * (c1 * c1), 
            B * c1 - 2 * A * a * (c1 * c1), 
            C - B * a * c1 + A * ((c0 * c1) * (c0 * c1))
        };
    }
};

template <typename T, template<typename> class RSPType>
class RGBAlbedoSpectrumDistribution : public SpectrumDistribution<RGBAlbedoSpectrumDistribution<T, RSPType>, T>{
private:
    RSPType<T> m_rsp;

public:
    using base = SpectrumDistribution<RGBAlbedoSpectrumDistribution<T, RSPType>, T>;
    using base::base;

    RGBAlbedoSpectrumDistribution(const RSPType<T>& rsp) : m_rsp(rsp) {}

    T at_impl(T lambda) const {
        return m_rsp.at(lambda);
    }

    const RSPType<T>& rsp() const { return m_rsp; }
    RSPType<T>& rsp() { return m_rsp; }
};


template<int LMin, int LMax>
struct TabularSpectrumRange {
    static constexpr int LMinValue = LMin;
    static constexpr int LMaxValue = LMax;
    static constexpr int Count = LMax - LMin + 1;
};

using luminantD50Range = TabularSpectrumRange<300, 830>;
using luminantD65Range = TabularSpectrumRange<300, 830>;
using luminantARange = TabularSpectrumRange<300, 830>;
using XYZRange = TabularSpectrumRange<360, 830>;

template<typename T>
inline static constexpr TabularSpectrumDistribution<T, XYZRange::LMinValue, XYZRange::LMaxValue> CIE_X(
    std::array<T, XYZRange::Count>{
        0.000129900000, 0.000145847000, 0.000163802100, 0.000184003700, 0.000206690200, 0.000232100000, 0.000260728000, 0.000293075000, 0.000329388000, 0.000369914000, 0.000414900000, 0.000464158700, 0.000518986000, 0.000581854000, 0.000655234700, 0.000741600000, 0.000845029600, 0.000964526800, 0.001094949000, 0.001231154000, 0.001368000000, 0.001502050000, 0.001642328000, 0.001802382000, 0.001995757000, 0.002236000000, 0.002535385000, 0.002892603000, 0.003300829000, 0.003753236000, 0.004243000000, 0.004762389000, 0.005330048000, 0.005978712000, 0.006741117000, 0.007650000000, 0.008751373000, 0.010028880000, 0.011421700000, 0.012869010000, 0.014310000000, 0.015704430000, 0.017147440000, 0.018781220000, 0.020748010000, 0.023190000000, 0.026207360000, 0.029782480000, 0.033880920000, 0.038468240000, 0.043510000000, 0.048995600000, 0.055022600000, 0.061718800000, 0.069212000000, 0.077630000000, 0.086958110000, 0.097176720000, 0.108406300000, 0.120767200000, 0.134380000000, 0.149358200000, 0.165395700000, 0.181983100000, 0.198611000000, 0.214770000000, 0.230186800000, 0.244879700000, 0.258777300000, 0.271807900000, 0.283900000000, 0.294943800000, 0.304896500000, 0.313787300000, 0.321645400000, 0.328500000000, 0.334351300000, 0.339210100000, 0.343121300000, 0.346129600000, 0.348280000000, 0.349599900000, 0.350147400000, 0.350013000000, 0.349287000000, 0.348060000000, 0.346373300000, 0.344262400000, 0.341808800000, 0.339094100000, 0.336200000000, 0.333197700000, 0.330041100000, 0.326635700000, 0.322886800000, 0.318700000000, 0.314025100000, 0.308884000000, 0.303290400000, 0.297257900000, 0.290800000000, 0.283970100000, 0.276721400000, 0.268917800000, 0.260422700000, 0.251100000000, 0.240847500000, 0.229851200000, 0.218407200000, 0.206811500000, 0.195360000000, 0.184213600000, 0.173327300000, 0.162688100000, 0.152283300000, 0.142100000000, 0.132178600000, 0.122569600000, 0.113275200000, 0.104297900000, 0.095640000000, 0.087299550000, 0.079308040000, 0.071717760000, 0.064580990000, 0.057950010000, 0.051862110000, 0.046281520000, 0.041150880000, 0.036412830000, 0.032010000000, 0.027917200000, 0.024144400000, 0.020687000000, 0.017540400000, 0.014700000000, 0.012161790000, 0.009919960000, 0.007967240000, 0.006296346000, 0.004900000000, 0.003777173000, 0.002945320000, 0.002424880000, 0.002236293000, 0.002400000000, 0.002925520000, 0.003836560000, 0.005174840000, 0.006982080000, 0.009300000000, 0.012149490000, 0.015535880000, 0.019477520000, 0.023992770000, 0.029100000000, 0.034814850000, 0.041120160000, 0.047985040000, 0.055378610000, 0.063270000000, 0.071635010000, 0.080462240000, 0.089739960000, 0.099456450000, 0.109600000000, 0.120167400000, 0.131114500000, 0.142367900000, 0.153854200000, 0.165500000000, 0.177257100000, 0.189140000000, 0.201169400000, 0.213365800000, 0.225749900000, 0.238320900000, 0.251066800000, 0.263992200000, 0.277101700000, 0.290400000000, 0.303891200000, 0.317572600000, 0.331438400000, 0.345482800000, 0.359700000000, 0.374083900000, 0.388639600000, 0.403378400000, 0.418311500000, 0.433449900000, 0.448795300000, 0.464336000000, 0.480064000000, 0.495971300000, 0.512050100000, 0.528295900000, 0.544691600000, 0.561209400000, 0.577821500000, 0.594500000000, 0.611220900000, 0.627975800000, 0.644760200000, 0.661569700000, 0.678400000000, 0.695239200000, 0.712058600000, 0.728828400000, 0.745518800000, 0.762100000000, 0.778543200000, 0.794825600000, 0.810926400000, 0.826824800000, 0.842500000000, 0.857932500000, 0.873081600000, 0.887894400000, 0.902318100000, 0.916300000000, 0.929799500000, 0.942798400000, 0.955277600000, 0.967217900000, 0.978600000000, 0.989385600000, 0.999548800000, 1.009089200000, 1.018006400000, 1.026300000000, 1.033982700000, 1.040986000000, 1.047188000000, 1.052466700000, 1.056700000000, 1.059794400000, 1.061799200000, 1.062806800000, 1.062909600000, 1.062200000000, 1.060735200000, 1.058443600000, 1.055224400000, 1.050976800000, 1.045600000000, 1.039036900000, 1.031360800000, 1.022666200000, 1.013047700000, 1.002600000000, 0.991367500000, 0.979331400000, 0.966491600000, 0.952847900000, 0.938400000000, 0.923194000000, 0.907244000000, 0.890502000000, 0.872920000000, 0.854449900000, 0.835084000000, 0.814946000000, 0.794186000000, 0.772954000000, 0.751400000000, 0.729583600000, 0.707588800000, 0.685602200000, 0.663810400000, 0.642400000000, 0.621514900000, 0.601113800000, 0.581105200000, 0.561397700000, 0.541900000000, 0.522599500000, 0.503546400000, 0.484743600000, 0.466193900000, 0.447900000000, 0.429861300000, 0.412098000000, 0.394644000000, 0.377533300000, 0.360800000000, 0.344456300000, 0.328516800000, 0.313019200000, 0.298001100000, 0.283500000000, 0.269544800000, 0.256118400000, 0.243189600000, 0.230727200000, 0.218700000000, 0.207097100000, 0.195923200000, 0.185170800000, 0.174832300000, 0.164900000000, 0.155366700000, 0.146230000000, 0.137490000000, 0.129146700000, 0.121200000000, 0.113639700000, 0.106465000000, 0.099690440000, 0.093330610000, 0.087400000000, 0.081900960000, 0.076804280000, 0.072077120000, 0.067686640000, 0.063600000000, 0.059806850000, 0.056282160000, 0.052971040000, 0.049818610000, 0.046770000000, 0.043784050000, 0.040875360000, 0.038072640000, 0.035404610000, 0.032900000000, 0.030564190000, 0.028380560000, 0.026344840000, 0.024452750000, 0.022700000000, 0.021084290000, 0.019599880000, 0.018237320000, 0.016987170000, 0.015840000000, 0.014790640000, 0.013831320000, 0.012948680000, 0.012129200000, 0.011359160000, 0.010629350000, 0.009938846000, 0.009288422000, 0.008678854000, 0.008110916000, 0.007582388000, 0.007088746000, 0.006627313000, 0.006195408000, 0.005790346000, 0.005409826000, 0.005052583000, 0.004717512000, 0.004403507000, 0.004109457000, 0.003833913000, 0.003575748000, 0.003334342000, 0.003109075000, 0.002899327000, 0.002704348000, 0.002523020000, 0.002354168000, 0.002196616000, 0.002049190000, 0.001910960000, 0.001781438000, 0.001660110000, 0.001546459000, 0.001439971000, 0.001340042000, 0.001246275000, 0.001158471000, 0.001076430000, 0.000999949300, 0.000928735800, 0.000862433200, 0.000800750300, 0.000743396000, 0.000690078600, 0.000640515600, 0.000594502100, 0.000551864600, 0.000512429000, 0.000476021300, 0.000442453600, 0.000411511700, 0.000382981400, 0.000356649100, 0.000332301100, 0.000309758600, 0.000288887100, 0.000269539400, 0.000251568200, 0.000234826100, 0.000219171000, 0.000204525800, 0.000190840500, 0.000178065400, 0.000166150500, 0.000155023600, 0.000144621900, 0.000134909800, 0.000125852000, 0.000117413000, 0.000109551500, 0.000102224500, 0.000095394450, 0.000089023900, 0.000083075270, 0.000077512690, 0.000072313040, 0.000067457780, 0.000062928440, 0.000058706520, 0.000054770280, 0.000051099180, 0.000047676540, 0.000044485670, 0.000041509940, 0.000038733240, 0.000036142030, 0.000033723520, 0.000031464870, 0.000029353260, 0.000027375730, 0.000025524330, 0.000023793760, 0.000022178700, 0.000020673830, 0.000019272260, 0.000017966400, 0.000016749910, 0.000015616480, 0.000014559770, 0.000013573870, 0.000012654360, 0.000011797230, 0.000010998440, 0.000010253980, 0.000009559646, 0.000008912044, 0.000008308358, 0.000007745769, 0.000007221456, 0.000006732475, 0.000006276423, 0.000005851304, 0.000005455118, 0.000005085868, 0.000004741466, 0.000004420236, 0.000004120783, 0.000003841716, 0.000003581652, 0.000003339127, 0.000003112949, 0.000002902121, 0.000002705645, 0.000002522525, 0.000002351726, 0.000002192415, 0.000002043902, 0.000001905497, 0.000001776509, 0.000001656215, 0.000001544022, 0.000001439440, 0.000001341977, 0.000001251141, 
    }
);

template<typename T>
inline static constexpr TabularSpectrumDistribution<T, XYZRange::LMinValue, XYZRange::LMaxValue> CIE_Y(
    std::array<T, XYZRange::Count>{
        0.000003917000, 0.000004393581, 0.000004929604, 0.000005532136, 0.000006208245, 0.000006965000, 0.000007813219, 0.000008767336, 0.000009839844, 0.000011043230, 0.000012390000, 0.000013886410, 0.000015557280, 0.000017442960, 0.000019583750, 0.000022020000, 0.000024839650, 0.000028041260, 0.000031531040, 0.000035215210, 0.000039000000, 0.000042826400, 0.000046914600, 0.000051589600, 0.000057176400, 0.000064000000, 0.000072344210, 0.000082212240, 0.000093508160, 0.000106136100, 0.000120000000, 0.000134984000, 0.000151492000, 0.000170208000, 0.000191816000, 0.000217000000, 0.000246906700, 0.000281240000, 0.000318520000, 0.000357266700, 0.000396000000, 0.000433714700, 0.000473024000, 0.000517876000, 0.000572218700, 0.000640000000, 0.000724560000, 0.000825500000, 0.000941160000, 0.001069880000, 0.001210000000, 0.001362091000, 0.001530752000, 0.001720368000, 0.001935323000, 0.002180000000, 0.002454800000, 0.002764000000, 0.003117800000, 0.003526400000, 0.004000000000, 0.004546240000, 0.005159320000, 0.005829280000, 0.006546160000, 0.007300000000, 0.008086507000, 0.008908720000, 0.009767680000, 0.010664430000, 0.011600000000, 0.012573170000, 0.013582720000, 0.014629680000, 0.015715090000, 0.016840000000, 0.018007360000, 0.019214480000, 0.020453920000, 0.021718240000, 0.023000000000, 0.024294610000, 0.025610240000, 0.026958570000, 0.028351250000, 0.029800000000, 0.031310830000, 0.032883680000, 0.034521120000, 0.036225710000, 0.038000000000, 0.039846670000, 0.041768000000, 0.043766000000, 0.045842670000, 0.048000000000, 0.050243680000, 0.052573040000, 0.054980560000, 0.057458720000, 0.060000000000, 0.062601970000, 0.065277520000, 0.068042080000, 0.070911090000, 0.073900000000, 0.077016000000, 0.080266400000, 0.083666800000, 0.087232800000, 0.090980000000, 0.094917550000, 0.099045840000, 0.103367400000, 0.107884600000, 0.112600000000, 0.117532000000, 0.122674400000, 0.127992800000, 0.133452800000, 0.139020000000, 0.144676400000, 0.150469300000, 0.156461900000, 0.162717700000, 0.169300000000, 0.176243100000, 0.183558100000, 0.191273500000, 0.199418000000, 0.208020000000, 0.217119900000, 0.226734500000, 0.236857100000, 0.247481200000, 0.258600000000, 0.270184900000, 0.282293900000, 0.295050500000, 0.308578000000, 0.323000000000, 0.338402100000, 0.354685800000, 0.371698600000, 0.389287500000, 0.407300000000, 0.425629900000, 0.444309600000, 0.463394400000, 0.482939500000, 0.503000000000, 0.523569300000, 0.544512000000, 0.565690000000, 0.586965300000, 0.608200000000, 0.629345600000, 0.650306800000, 0.670875200000, 0.690842400000, 0.710000000000, 0.728185200000, 0.745463600000, 0.761969400000, 0.777836800000, 0.793200000000, 0.808110400000, 0.822496200000, 0.836306800000, 0.849491600000, 0.862000000000, 0.873810800000, 0.884962400000, 0.895493600000, 0.905443200000, 0.914850100000, 0.923734800000, 0.932092400000, 0.939922600000, 0.947225200000, 0.954000000000, 0.960256100000, 0.966007400000, 0.971260600000, 0.976022500000, 0.980300000000, 0.984092400000, 0.987418200000, 0.990312800000, 0.992811600000, 0.994950100000, 0.996710800000, 0.998098300000, 0.999112000000, 0.999748200000, 1.000000000000, 0.999856700000, 0.999304600000, 0.998325500000, 0.996898700000, 0.995000000000, 0.992600500000, 0.989742600000, 0.986444400000, 0.982724100000, 0.978600000000, 0.974083700000, 0.969171200000, 0.963856800000, 0.958134900000, 0.952000000000, 0.945450400000, 0.938499200000, 0.931162800000, 0.923457600000, 0.915400000000, 0.907006400000, 0.898277200000, 0.889204800000, 0.879781600000, 0.870000000000, 0.859861300000, 0.849392000000, 0.838622000000, 0.827581300000, 0.816300000000, 0.804794700000, 0.793082000000, 0.781192000000, 0.769154700000, 0.757000000000, 0.744754100000, 0.732422400000, 0.720003600000, 0.707496500000, 0.694900000000, 0.682219200000, 0.669471600000, 0.656674400000, 0.643844800000, 0.631000000000, 0.618155500000, 0.605314400000, 0.592475600000, 0.579637900000, 0.566800000000, 0.553961100000, 0.541137200000, 0.528352800000, 0.515632300000, 0.503000000000, 0.490468800000, 0.478030400000, 0.465677600000, 0.453403200000, 0.441200000000, 0.429080000000, 0.417036000000, 0.405032000000, 0.393032000000, 0.381000000000, 0.368918400000, 0.356827200000, 0.344776800000, 0.332817600000, 0.321000000000, 0.309338100000, 0.297850400000, 0.286593600000, 0.275624500000, 0.265000000000, 0.254763200000, 0.244889600000, 0.235334400000, 0.226052800000, 0.217000000000, 0.208161600000, 0.199548800000, 0.191155200000, 0.182974400000, 0.175000000000, 0.167223500000, 0.159646400000, 0.152277600000, 0.145125900000, 0.138200000000, 0.131500300000, 0.125024800000, 0.118779200000, 0.112769100000, 0.107000000000, 0.101476200000, 0.096188640000, 0.091122960000, 0.086264850000, 0.081600000000, 0.077120640000, 0.072825520000, 0.068710080000, 0.064769760000, 0.061000000000, 0.057396210000, 0.053955040000, 0.050673760000, 0.047549650000, 0.044580000000, 0.041758720000, 0.039084960000, 0.036563840000, 0.034200480000, 0.032000000000, 0.029962610000, 0.028076640000, 0.026329360000, 0.024708050000, 0.023200000000, 0.021800770000, 0.020501120000, 0.019281080000, 0.018120690000, 0.017000000000, 0.015903790000, 0.014837180000, 0.013810680000, 0.012834780000, 0.011920000000, 0.011068310000, 0.010273390000, 0.009533311000, 0.008846157000, 0.008210000000, 0.007623781000, 0.007085424000, 0.006591476000, 0.006138485000, 0.005723000000, 0.005343059000, 0.004995796000, 0.004676404000, 0.004380075000, 0.004102000000, 0.003838453000, 0.003589099000, 0.003354219000, 0.003134093000, 0.002929000000, 0.002738139000, 0.002559876000, 0.002393244000, 0.002237275000, 0.002091000000, 0.001953587000, 0.001824580000, 0.001703580000, 0.001590187000, 0.001484000000, 0.001384496000, 0.001291268000, 0.001204092000, 0.001122744000, 0.001047000000, 0.000976589600, 0.000911108800, 0.000850133200, 0.000793238400, 0.000740000000, 0.000690082700, 0.000643310000, 0.000599496000, 0.000558454700, 0.000520000000, 0.000483913600, 0.000450052800, 0.000418345200, 0.000388718400, 0.000361100000, 0.000335383500, 0.000311440400, 0.000289165600, 0.000268453900, 0.000249200000, 0.000231301900, 0.000214685600, 0.000199288400, 0.000185047500, 0.000171900000, 0.000159778100, 0.000148604400, 0.000138301600, 0.000128792500, 0.000120000000, 0.000111859500, 0.000104322400, 0.000097335600, 0.000090845870, 0.000084800000, 0.000079146670, 0.000073858000, 0.000068916000, 0.000064302670, 0.000060000000, 0.000055981870, 0.000052225600, 0.000048718400, 0.000045447470, 0.000042400000, 0.000039561040, 0.000036915120, 0.000034448680, 0.000032148160, 0.000030000000, 0.000027991250, 0.000026113560, 0.000024360240, 0.000022724610, 0.000021200000, 0.000019778550, 0.000018452850, 0.000017216870, 0.000016064590, 0.000014990000, 0.000013987280, 0.000013051550, 0.000012178180, 0.000011362540, 0.000010600000, 0.000009885877, 0.000009217304, 0.000008592362, 0.000008009133, 0.000007465700, 0.000006959567, 0.000006487995, 0.000006048699, 0.000005639396, 0.000005257800, 0.000004901771, 0.000004569720, 0.000004260194, 0.000003971739, 0.000003702900, 0.000003452163, 0.000003218302, 0.000003000300, 0.000002797139, 0.000002607800, 0.000002431220, 0.000002266531, 0.000002113013, 0.000001969943, 0.000001836600, 0.000001712230, 0.000001596228, 0.000001488090, 0.000001387314, 0.000001293400, 0.000001205820, 0.000001124143, 0.000001048009, 0.000000977058, 0.000000910930, 0.000000849251, 0.000000791721, 0.000000738090, 0.000000688110, 0.000000641530, 0.000000598089, 0.000000557575, 0.000000519808, 0.000000484612, 0.000000451810, 
    }
);

template<typename T>
inline static constexpr TabularSpectrumDistribution<T, XYZRange::LMinValue, XYZRange::LMaxValue> CIE_Z(
    std::array<T, XYZRange::Count>{
        0.000606100000, 0.000680879200, 0.000765145600, 0.000860012400, 0.000966592800, 0.001086000000, 0.001220586000, 0.001372729000, 0.001543579000, 0.001734286000, 0.001946000000, 0.002177777000, 0.002435809000, 0.002731953000, 0.003078064000, 0.003486000000, 0.003975227000, 0.004540880000, 0.005158320000, 0.005802907000, 0.006450001000, 0.007083216000, 0.007745488000, 0.008501152000, 0.009414544000, 0.010549990000, 0.011965800000, 0.013655870000, 0.015588050000, 0.017730150000, 0.020050010000, 0.022511360000, 0.025202880000, 0.028279720000, 0.031897040000, 0.036210000000, 0.041437710000, 0.047503720000, 0.054119880000, 0.060998030000, 0.067850010000, 0.074486320000, 0.081361560000, 0.089153640000, 0.098540480000, 0.110200000000, 0.124613300000, 0.141701700000, 0.161303500000, 0.183256800000, 0.207400000000, 0.233692100000, 0.262611400000, 0.294774600000, 0.330798500000, 0.371300000000, 0.416209100000, 0.465464200000, 0.519694800000, 0.579530300000, 0.645600000000, 0.718483800000, 0.796713300000, 0.877845900000, 0.959439000000, 1.039050100000, 1.115367300000, 1.188497100000, 1.258123300000, 1.323929600000, 1.385600000000, 1.442635200000, 1.494803500000, 1.542190300000, 1.584880700000, 1.622960000000, 1.656404800000, 1.685295900000, 1.709874500000, 1.730382100000, 1.747060000000, 1.760044600000, 1.769623300000, 1.776263700000, 1.780433400000, 1.782600000000, 1.782968200000, 1.781699800000, 1.779198200000, 1.775867100000, 1.772110000000, 1.768258900000, 1.764039000000, 1.758943800000, 1.752466300000, 1.744100000000, 1.733559500000, 1.720858100000, 1.705936900000, 1.688737200000, 1.669200000000, 1.647528700000, 1.623412700000, 1.596022300000, 1.564528000000, 1.528100000000, 1.486111400000, 1.439521500000, 1.389879900000, 1.338736200000, 1.287640000000, 1.237422300000, 1.187824300000, 1.138761100000, 1.090148000000, 1.041900000000, 0.994197600000, 0.947347300000, 0.901453100000, 0.856619300000, 0.812950100000, 0.770517300000, 0.729444800000, 0.689913600000, 0.652104900000, 0.616200000000, 0.582328600000, 0.550416200000, 0.520337600000, 0.491967300000, 0.465180000000, 0.439924600000, 0.416183600000, 0.393882200000, 0.372945900000, 0.353300000000, 0.334857800000, 0.317552100000, 0.301337500000, 0.286168600000, 0.272000000000, 0.258817100000, 0.246483800000, 0.234771800000, 0.223453300000, 0.212300000000, 0.201169200000, 0.190119600000, 0.179225400000, 0.168560800000, 0.158200000000, 0.148138300000, 0.138375800000, 0.128994200000, 0.120075100000, 0.111700000000, 0.103904800000, 0.096667480000, 0.089982720000, 0.083845310000, 0.078249990000, 0.073208990000, 0.068678160000, 0.064567840000, 0.060788350000, 0.057250010000, 0.053904350000, 0.050746640000, 0.047752760000, 0.044898590000, 0.042160000000, 0.039507280000, 0.036935640000, 0.034458360000, 0.032088720000, 0.029840000000, 0.027711810000, 0.025694440000, 0.023787160000, 0.021989250000, 0.020300000000, 0.018718050000, 0.017240360000, 0.015863640000, 0.014584610000, 0.013400000000, 0.012307230000, 0.011301880000, 0.010377920000, 0.009529306000, 0.008749999000, 0.008035200000, 0.007381600000, 0.006785400000, 0.006242800000, 0.005749999000, 0.005303600000, 0.004899800000, 0.004534200000, 0.004202400000, 0.003900000000, 0.003623200000, 0.003370600000, 0.003141400000, 0.002934800000, 0.002749999000, 0.002585200000, 0.002438600000, 0.002309400000, 0.002196800000, 0.002100000000, 0.002017733000, 0.001948200000, 0.001889800000, 0.001840933000, 0.001800000000, 0.001766267000, 0.001737800000, 0.001711200000, 0.001683067000, 0.001650001000, 0.001610133000, 0.001564400000, 0.001513600000, 0.001458533000, 0.001400000000, 0.001336667000, 0.001270000000, 0.001205000000, 0.001146667000, 0.001100000000, 0.001068800000, 0.001049400000, 0.001035600000, 0.001021200000, 0.001000000000, 0.000968640000, 0.000929920000, 0.000886880000, 0.000842560000, 0.000800000000, 0.000760960000, 0.000723680000, 0.000685920000, 0.000645440000, 0.000600000000, 0.000547866700, 0.000491600000, 0.000435400000, 0.000383466700, 0.000340000000, 0.000307253300, 0.000283160000, 0.000265440000, 0.000251813300, 0.000240000000, 0.000229546700, 0.000220640000, 0.000211960000, 0.000202186700, 0.000190000000, 0.000174213300, 0.000155640000, 0.000135960000, 0.000116853300, 0.000100000000, 0.000086133330, 0.000074600000, 0.000065000000, 0.000056933330, 0.000049999990, 0.000044160000, 0.000039480000, 0.000035720000, 0.000032640000, 0.000030000000, 0.000027653330, 0.000025560000, 0.000023640000, 0.000021813330, 0.000020000000, 0.000018133330, 0.000016200000, 0.000014200000, 0.000012133330, 0.000010000000, 0.000007733333, 0.000005400000, 0.000003200000, 0.000001333333, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 
    }
);

template<typename T>
inline static constexpr TabularSpectrumDistribution<T, luminantD65Range::LMinValue, luminantD65Range::LMaxValue> CIE_D65_ilum(
    std::array<T, luminantD65Range::Count>{
        0.03410,  0.36014,  0.68618,  1.01222,  1.33826,  1.66430,  1.99034,  2.31638,  2.64242,  2.96846,  3.29450,  4.98865,  6.68280,  8.37695,  10.07110,  11.76520,  13.45940,  15.15350,  16.84770,  18.54180,  20.23600,  21.91770,  23.59950,  25.28120,  26.96300,  28.64470,  30.32650,  32.00820,  33.69000,  35.37170,  37.05350,  37.34300,  37.63260,  37.92210,  38.21160,  38.50110,  38.79070,  39.08020,  39.36970,  39.65930,  39.94880,  40.44510,  40.94140,  41.43770,  41.93400,  42.43020,  42.92650,  43.42280,  43.91910,  44.41540,  44.91170,  45.08440,  45.25700,  45.42970,  45.60230,  45.77500,  45.94770,  46.12030,  46.29300,  46.46560,  46.63830,  47.18340,  47.72850,  48.27350,  48.81860,  49.36370,  49.90880,  50.45390,  50.99890,  51.54400,  52.08910,  51.87770,  51.66640,  51.45500,  51.24370,  51.03230,  50.82090,  50.60960,  50.39820,  50.18690,  49.97550,  50.44280,  50.91000,  51.37730,  51.84460,  52.31180,  52.77910,  53.24640,  53.71370,  54.18090,  54.64820,  57.45890,  60.26950,  63.08020,  65.89090,  68.70150,  71.51220,  74.32290,  77.13360,  79.94420,  82.75490,  83.62800,  84.50110,  85.37420,  86.24730,  87.12040,  87.99360,  88.86670,  89.73980,  90.61290,  91.48600,  91.68060,  91.87520,  92.06970,  92.26430,  92.45890,  92.65350,  92.84810,  93.04260,  93.23720,  93.43180,  92.75680,  92.08190,  91.40690,  90.73200,  90.05700,  89.38210,  88.70710,  88.03220,  87.35720,  86.68230,  88.50060,  90.31880,  92.13710,  93.95540,  95.77360,  97.59190,  99.41020,  101.22800,  103.04700,  104.86500,  106.07900,  107.29400,  108.50800,  109.72200,  110.93600,  112.15100,  113.36500,  114.57900,  115.79400,  117.00800,  117.08800,  117.16900,  117.24900,  117.33000,  117.41000,  117.49000,  117.57100,  117.65100,  117.73200,  117.81200,  117.51700,  117.22200,  116.92700,  116.63200,  116.33600,  116.04100,  115.74600,  115.45100,  115.15600,  114.86100,  114.96700,  115.07300,  115.18000,  115.28600,  115.39200,  115.49800,  115.60400,  115.71100,  115.81700,  115.92300,  115.21200,  114.50100,  113.78900,  113.07800,  112.36700,  111.65600,  110.94500,  110.23300,  109.52200,  108.81100,  108.86500,  108.92000,  108.97400,  109.02800,  109.08200,  109.13700,  109.19100,  109.24500,  109.30000,  109.35400,  109.19900,  109.04400,  108.88800,  108.73300,  108.57800,  108.42300,  108.26800,  108.11200,  107.95700,  107.80200,  107.50100,  107.20000,  106.89800,  106.59700,  106.29600,  105.99500,  105.69400,  105.39200,  105.09100,  104.79000,  105.08000,  105.37000,  105.66000,  105.95000,  106.23900,  106.52900,  106.81900,  107.10900,  107.39900,  107.68900,  107.36100,  107.03200,  106.70400,  106.37500,  106.04700,  105.71900,  105.39000,  105.06200,  104.73300,  104.40500,  104.36900,  104.33300,  104.29700,  104.26100,  104.22500,  104.19000,  104.15400,  104.11800,  104.08200,  104.04600,  103.64100,  103.23700,  102.83200,  102.42800,  102.02300,  101.61800,  101.21400,  100.80900,  100.40500,  100.00000,  99.63340,  99.26680,  98.90030,  98.53370,  98.16710,  97.80050,  97.43390,  97.06740,  96.70080,  96.33420,  96.27960,  96.22500,  96.17030,  96.11570,  96.06110,  96.00650,  95.95190,  95.89720,  95.84260,  95.78800,  95.07780,  94.36750,  93.65730,  92.94700,  92.23680,  91.52660,  90.81630,  90.10610,  89.39580,  88.68560,  88.81770,  88.94970,  89.08180,  89.21380,  89.34590,  89.47800,  89.61000,  89.74210,  89.87410,  90.00620,  89.96550,  89.92480,  89.88410,  89.84340,  89.80260,  89.76190,  89.72120,  89.68050,  89.63980,  89.59910,  89.40910,  89.21900,  89.02900,  88.83890,  88.64890,  88.45890,  88.26880,  88.07880,  87.88870,  87.69870,  87.25770,  86.81670,  86.37570,  85.93470,  85.49360,  85.05260,  84.61160,  84.17060,  83.72960,  83.28860,  83.32970,  83.37070,  83.41180,  83.45280,  83.49390,  83.53500,  83.57600,  83.61710,  83.65810,  83.69920,  83.33200,  82.96470,  82.59750,  82.23020,  81.86300,  81.49580,  81.12850,  80.76130,  80.39400,  80.02680,  80.04560,  80.06440,  80.08310,  80.10190,  80.12070,  80.13950,  80.15830,  80.17700,  80.19580,  80.21460,  80.42090,  80.62720,  80.83360,  81.03990,  81.24620,  81.45250,  81.65880,  81.86520,  82.07150,  82.27780,  81.87840,  81.47910,  81.07970,  80.68040,  80.28100,  79.88160,  79.48230,  79.08290,  78.68360,  78.28420,  77.42790,  76.57160,  75.71530,  74.85900,  74.00270,  73.14650,  72.29020,  71.43390,  70.57760,  69.72130,  69.91010,  70.09890,  70.28760,  70.47640,  70.66520,  70.85400,  71.04280,  71.23150,  71.42030,  71.60910,  71.88310,  72.15710,  72.43110,  72.70510,  72.97900,  73.25300,  73.52700,  73.80100,  74.07500,  74.34900,  73.07450,  71.80000,  70.52550,  69.25100,  67.97650,  66.70200,  65.42750,  64.15300,  62.87850,  61.60400,  62.43220,  63.26030,  64.08850,  64.91660,  65.74480,  66.57300,  67.40110,  68.22930,  69.05740,  69.88560,  70.40570,  70.92590,  71.44600,  71.96620,  72.48630,  73.00640,  73.52660,  74.04670,  74.56690,  75.08700,  73.93760,  72.78810,  71.63870,  70.48930,  69.33980,  68.19040,  67.04100,  65.89160,  64.74210,  63.59270,  61.87520,  60.15780,  58.44030,  56.72290,  55.00540,  53.28800,  51.57050,  49.85310,  48.13560,  46.41820,  48.45690,  50.49560,  52.53440,  54.57310,  56.61180,  58.65050,  60.68920,  62.72800,  64.76670,  66.80540,  66.46310,  66.12090,  65.77860,  65.43640,  65.09410,  64.75180,  64.40960,  64.06730,  63.72510,  63.38280,  63.47490,  63.56700,  63.65920,  63.75130,  63.84340,  63.93550,  64.02760,  64.11980,  64.21190,  64.30400,  63.81880,  63.33360,  62.84840,  62.36320,  61.87790,  61.39270,  60.90750,  60.42230,  59.93710,  59.45190,  58.70260,  57.95330,  57.20400,  56.45470,  55.70540,  54.95620,  54.20690,  53.45760,  52.70830,  51.95900,  52.50720,  53.05530,  53.60350,  54.15160,  54.69980,  55.24800,  55.79610,  56.34430,  56.89240,  57.44060,  57.72780,  58.01500,  58.30220,  58.58940,  58.87650,  59.16370,  59.45090,  59.73810,  60.02530,  60.31250
    }
);


template<typename T>
inline static constexpr TabularSpectrumDistribution<T, luminantD50Range::LMinValue, luminantD50Range::LMaxValue> CIE_D50_ilum(
    std::array<T, luminantD50Range::Count>{
        0.01922,  0.22235,  0.42548,  0.62860,  0.83173,  1.03486,  1.23799,  1.44112,  1.64424,  1.84737,  2.05050,  2.62329,  3.19608,  3.76887,  4.34166,  4.91445,  5.48724,  6.06003,  6.63282,  7.20561,  7.77840,  8.47531,  9.17222,  9.86913,  10.56600,  11.26300,  11.95990,  12.65680,  13.35370,  14.05060,  14.74750,  15.06760,  15.38760,  15.70760,  16.02770,  16.34780,  16.66780,  16.98780,  17.30790,  17.62800,  17.94800,  18.25420,  18.56030,  18.86650,  19.17270,  19.47880,  19.78500,  20.09120,  20.39740,  20.70350,  21.00970,  21.30290,  21.59610,  21.88940,  22.18260,  22.47580,  22.76900,  23.06220,  23.35550,  23.64870,  23.94190,  24.24380,  24.54570,  24.84750,  25.14940,  25.45130,  25.75320,  26.05510,  26.35690,  26.65880,  26.96070,  26.71340,  26.46610,  26.21870,  25.97140,  25.72410,  25.47680,  25.22950,  24.98210,  24.73480,  24.48750,  25.02580,  25.56410,  26.10240,  26.64070,  27.17900,  27.71740,  28.25570,  28.79400,  29.33230,  29.87060,  31.81440,  33.75810,  35.70180,  37.64560,  39.58940,  41.53310,  43.47680,  45.42060,  47.36440,  49.30810,  50.02860,  50.74900,  51.46950,  52.19000,  52.91040,  53.63090,  54.35140,  55.07190,  55.79230,  56.51280,  56.86490,  57.21700,  57.56910,  57.92120,  58.27330,  58.62540,  58.97750,  59.32960,  59.68170,  60.03380,  59.81220,  59.59050,  59.36890,  59.14730,  58.92560,  58.70400,  58.48240,  58.26080,  58.03910,  57.81750,  59.51820,  61.21900,  62.91970,  64.62050,  66.32120,  68.02190,  69.72270,  71.42340,  73.12420,  74.82490,  76.06710,  77.30940,  78.55160,  79.79380,  81.03600,  82.27830,  83.52050,  84.76270,  86.00500,  87.24720,  87.58370,  87.92020,  88.25670,  88.59320,  88.92970,  89.26620,  89.60270,  89.93920,  90.27570,  90.61220,  90.68780,  90.76340,  90.83900,  90.91460,  90.99020,  91.06570,  91.14130,  91.21690,  91.29250,  91.36810,  91.74210,  92.11620,  92.49020,  92.86430,  93.23830,  93.61230,  93.98640,  94.36040,  94.73450,  95.10850,  94.79390,  94.47930,  94.16480,  93.85020,  93.53560,  93.22100,  92.90640,  92.59190,  92.27730,  91.96270,  92.33880,  92.71490,  93.09100,  93.46710,  93.84320,  94.21930,  94.59540,  94.97150,  95.34760,  95.72370,  95.81270,  95.90160,  95.99060,  96.07950,  96.16850,  96.25750,  96.34640,  96.43540,  96.52430,  96.61330,  96.66490,  96.71640,  96.76800,  96.81960,  96.87120,  96.92270,  96.97430,  97.02590,  97.07740,  97.12900,  97.62600,  98.12300,  98.62000,  99.11700,  99.61400,  100.11100,  100.60800,  101.10500,  101.60200,  102.09900,  101.96500,  101.83000,  101.69600,  101.56100,  101.42700,  101.29200,  101.15800,  101.02400,  100.88900,  100.75500,  100.91100,  101.06700,  101.22300,  101.38000,  101.53600,  101.69200,  101.84800,  102.00500,  102.16100,  102.31700,  102.08500,  101.85400,  101.62200,  101.39000,  101.15800,  100.92700,  100.69500,  100.46300,  100.23200,  100.00000,  99.77350,  99.54700,  99.32050,  99.09400,  98.86750,  98.64100,  98.41450,  98.18800,  97.96150,  97.73500,  97.85330,  97.97160,  98.08990,  98.20820,  98.32650,  98.44480,  98.56310,  98.68140,  98.79970,  98.91800,  98.37610,  97.83420,  97.29220,  96.75030,  96.20840,  95.66650,  95.12460,  94.58260,  94.04070,  93.49880,  93.91770,  94.33660,  94.75550,  95.17440,  95.59330,  96.01220,  96.43110,  96.85000,  97.26890,  97.68780,  97.84590,  98.00410,  98.16220,  98.32030,  98.47840,  98.63660,  98.79470,  98.95280,  99.11100,  99.26910,  99.24630,  99.22360,  99.20080,  99.17810,  99.15530,  99.13250,  99.10980,  99.08700,  99.06430,  99.04150,  98.70950,  98.37760,  98.04560,  97.71360,  97.38160,  97.04970,  96.71770,  96.38570,  96.05380,  95.72180,  96.03530,  96.34890,  96.66240,  96.97600,  97.28950,  97.60300,  97.91660,  98.23010,  98.54370,  98.85720,  98.53820,  98.21920,  97.90020,  97.58120,  97.26220,  96.94320,  96.62420,  96.30520,  95.98620,  95.66720,  95.91950,  96.17170,  96.42400,  96.67620,  96.92850,  97.18080,  97.43300,  97.68530,  97.93750,  98.18980,  98.67120,  99.15250,  99.63390,  100.11500,  100.59700,  101.07800,  101.55900,  102.04100,  102.52200,  103.00300,  102.61600,  102.22900,  101.84200,  101.45500,  101.06800,  100.68100,  100.29400,  99.90710,  99.52000,  99.13300,  97.95780,  96.78260,  95.60740,  94.43220,  93.25700,  92.08170,  90.90650,  89.73130,  88.55610,  87.38090,  87.80320,  88.22540,  88.64770,  89.06990,  89.49220,  89.91450,  90.33670,  90.75900,  91.18120,  91.60350,  91.73200,  91.86050,  91.98900,  92.11750,  92.24600,  92.37460,  92.50310,  92.63160,  92.76010,  92.88860,  91.28520,  89.68180,  88.07830,  86.47490,  84.87150,  83.26810,  81.66470,  80.06120,  78.45780,  76.85440,  77.82010,  78.78580,  79.75140,  80.71710,  81.68280,  82.64850,  83.61420,  84.57980,  85.54550,  86.51120,  87.11810,  87.72490,  88.33180,  88.93860,  89.54550,  90.15240,  90.75920,  91.36610,  91.97290,  92.57980,  91.14480,  89.70980,  88.27480,  86.83980,  85.40480,  83.96990,  82.53490,  81.09990,  79.66490,  78.22990,  76.17610,  74.12230,  72.06850,  70.01470,  67.96080,  65.90700,  63.85320,  61.79940,  59.74560,  57.69180,  60.21490,  62.73800,  65.26120,  67.78430,  70.30740,  72.83050,  75.35360,  77.87680,  80.39990,  82.92300,  82.45810,  81.99320,  81.52830,  81.06340,  80.59850,  80.13360,  79.66870,  79.20380,  78.73890,  78.27400,  78.40200,  78.53010,  78.65810,  78.78620,  78.91420,  79.04220,  79.17030,  79.29830,  79.42640,  79.55440,  78.93910,  78.32380,  77.70850,  77.09320,  76.47800,  75.86270,  75.24740,  74.63210,  74.01680,  73.40150,  72.45340,  71.50520,  70.55710,  69.60900,  68.66080,  67.71270,  66.76460,  65.81650,  64.86830,  63.92020,  64.60590,  65.29160,  65.97720,  66.66290,  67.34860,  68.03430,  68.72000,  69.40560,  70.09130,  70.77700,  71.14350,  71.50990,  71.87640,  72.24290,  72.60940,  72.97580,  73.34230,  73.70880,  74.07520,  74.44170
    }
);

template<typename T>
inline static constexpr TabularSpectrumDistribution<T, luminantARange::LMinValue, luminantARange::LMaxValue> CIE_A_ilum(
    std::array<T, luminantARange::Count>{
        0.93048,  0.96764,  1.00597,  1.04549,  1.08623,  1.12821,  1.17147,  1.21602,  1.26188,  1.30910,  1.35769,  1.40768,  1.45910,  1.51198,  1.56633,  1.62219,  1.67959,  1.73855,  1.79910,  1.86127,  1.92508,  1.99057,  2.05776,  2.12667,  2.19734,  2.26980,  2.34406,  2.42017,  2.49814,  2.57801,  2.65981,  2.74355,  2.82928,  2.91701,  3.00678,  3.09861,  3.19253,  3.28857,  3.38676,  3.48712,  3.58968,  3.69447,  3.80152,  3.91085,  4.02250,  4.13648,  4.25282,  4.37156,  4.49272,  4.61631,  4.74238,  4.87095,  5.00204,  5.13568,  5.27189,  5.41070,  5.55213,  5.69622,  5.84298,  5.99244,  6.14462,  6.29955,  6.45724,  6.61774,  6.78105,  6.94720,  7.11621,  7.28811,  7.46292,  7.64066,  7.82135,  8.00501,  8.19167,  8.38134,  8.57404,  8.76980,  8.96864,  9.17056,  9.37561,  9.58378,  9.79510,  10.00960,  10.22730,  10.44810,  10.67220,  10.89960,  11.13020,  11.36400,  11.60120,  11.84160,  12.08530,  12.33240,  12.58280,  12.83660,  13.09380,  13.35430,  13.61820,  13.88550,  14.15630,  14.43040,  14.70800,  14.98910,  15.27360,  15.56160,  15.85300,  16.14800,  16.44640,  16.74840,  17.05380,  17.36280,  17.67530,  17.99130,  18.31080,  18.63390,  18.96050,  19.29070,  19.62440,  19.96170,  20.30260,  20.64700,  20.99500,  21.34650,  21.70160,  22.06030,  22.42250,  22.78830,  23.15770,  23.53070,  23.90720,  24.28730,  24.67090,  25.05810,  25.44890,  25.84320,  26.24110,  26.64250,  27.04750,  27.45600,  27.86810,  28.28360,  28.70270,  29.12530,  29.55150,  29.98110,  30.41420,  30.85080,  31.29090,  31.73450,  32.18150,  32.63200,  33.08590,  33.54320,  34.00400,  34.46820,  34.93580,  35.40680,  35.88110,  36.35880,  36.83990,  37.32430,  37.81210,  38.30310,  38.79750,  39.29510,  39.79600,  40.30020,  40.80760,  41.31820,  41.83200,  42.34910,  42.86930,  43.39260,  43.91920,  44.44880,  44.98160,  45.51740,  46.05630,  46.59830,  47.14330,  47.69130,  48.24230,  48.79630,  49.35330,  49.91320,  50.47600,  51.04180,  51.61040,  52.18180,  52.75610,  53.33320,  53.91320,  54.49580,  55.08130,  55.66940,  56.26030,  56.85390,  57.45010,  58.04890,  58.65040,  59.25450,  59.86110,  60.47030,  61.08200,  61.69620,  62.31280,  62.93200,  63.55350,  64.17750,  64.80380,  65.43250,  66.06350,  66.69680,  67.33240,  67.97020,  68.61020,  69.25250,  69.89690,  70.54350,  71.19220,  71.84300,  72.49590,  73.15080,  73.80770,  74.46660,  75.12750,  75.79030,  76.45510,  77.12170,  77.79020,  78.46050,  79.13260,  79.80650,  80.48210,  81.15950,  81.83860,  82.51930,  83.20170,  83.88560,  84.57120,  85.25840,  85.94700,  86.63720,  87.32880,  88.02190,  88.71650,  89.41240,  90.10970,  90.80830,  91.50820,  92.20950,  92.91200,  93.61570,  94.32060,  95.02670,  95.73390,  96.44230,  97.15180,  97.86230,  98.57390,  99.28640,  100.00000,  100.71500,  101.43000,  102.14600,  102.86400,  103.58200,  104.30100,  105.02000,  105.74100,  106.46200,  107.18400,  107.90600,  108.63000,  109.35400,  110.07800,  110.80300,  111.52900,  112.25500,  112.98200,  113.70900,  114.43600,  115.16400,  115.89300,  116.62200,  117.35100,  118.08000,  118.81000,  119.54000,  120.27000,  121.00100,  121.73100,  122.46200,  123.19300,  123.92400,  124.65500,  125.38600,  126.11800,  126.84900,  127.58000,  128.31200,  129.04300,  129.77400,  130.50500,  131.23600,  131.96600,  132.69700,  133.42700,  134.15700,  134.88700,  135.61700,  136.34600,  137.07500,  137.80400,  138.53200,  139.26000,  139.98800,  140.71500,  141.44100,  142.16700,  142.89300,  143.61800,  144.34300,  145.06700,  145.79000,  146.51300,  147.23500,  147.95700,  148.67800,  149.39800,  150.11700,  150.83600,  151.55400,  152.27100,  152.98800,  153.70400,  154.41800,  155.13200,  155.84500,  156.55800,  157.26900,  157.97900,  158.68900,  159.39700,  160.10400,  160.81100,  161.51600,  162.22100,  162.92400,  163.62600,  164.32700,  165.02800,  165.72600,  166.42400,  167.12100,  167.81600,  168.51000,  169.20300,  169.89500,  170.58600,  171.27500,  171.96300,  172.65000,  173.33500,  174.01900,  174.70200,  175.38300,  176.06300,  176.74100,  177.41900,  178.09400,  178.76900,  179.44100,  180.11300,  180.78300,  181.45100,  182.11800,  182.78300,  183.44700,  184.10900,  184.77000,  185.42900,  186.08700,  186.74300,  187.39700,  188.05000,  188.70100,  189.35000,  189.99800,  190.64400,  191.28800,  191.93100,  192.57200,  193.21100,  193.84900,  194.48400,  195.11800,  195.75000,  196.38100,  197.00900,  197.63600,  198.26100,  198.88400,  199.50600,  200.12500,  200.74300,  201.35900,  201.97200,  202.58400,  203.19500,  203.80300,  204.40900,  205.01300,  205.61600,  206.21600,  206.81500,  207.41100,  208.00600,  208.59900,  209.18900,  209.77800,  210.36500,  210.94900,  211.53200,  212.11200,  212.69100,  213.26800,  213.84200,  214.41500,  214.98500,  215.55300,  216.12000,  216.68400,  217.24600,  217.80600,  218.36400,  218.92000,  219.47300,  220.02500,  220.57400,  221.12200,  221.66700,  222.21000,  222.75100,  223.29000,  223.82600,  224.36100,  224.89300,  225.42300,  225.95100,  226.47700,  227.00000,  227.52200,  228.04100,  228.55800,  229.07300,  229.58500,  230.09600,  230.60400,  231.11000,  231.61400,  232.11500,  232.61500,  233.11200,  233.60600,  234.09900,  234.58900,  235.07800,  235.56400,  236.04700,  236.52900,  237.00800,  237.48500,  237.95900,  238.43200,  238.90200,  239.37000,  239.83600,  240.29900,  240.76000,  241.21900,  241.67500,  242.13000,  242.58200,  243.03100,  243.47900,  243.92400,  244.36700,  244.80800,  245.24600,  245.68200,  246.11600,  246.54800,  246.97700,  247.40400,  247.82900,  248.25100,  248.67100,  249.08900,  249.50500,  249.91800,  250.32900,  250.73800,  251.14400,  251.54800,  251.95000,  252.35000,  252.74700,  253.14200,  253.53500,  253.92500,  254.31400,  254.70000,  255.08300,  255.46500,  255.84400,  256.22100,  256.59500,  256.96800,  257.33800,  257.70600,  258.07100,  258.43400,  258.79500,  259.15400,  259.51100,  259.86500,  260.21700,  260.56700,  260.91400,  261.25900,  261.60200
    }
);

template<typename T>
static constexpr T CIE_Y_integral = 106.856895;
};